install.packages(c("devtools", "fueleconomy"))
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
install.packages(c("devtools", "fueleconomy"))
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2nd <- vehicles[vehicles$drive == "2-Wheel Drive",]
efficient_2nd <- vehicles_2nd[vehicles_2nd$cty > 20, ]
print(efficient_2nd)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive",]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
print(efficient_2wd)
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id" ]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
diff_makers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(diff_makers)
install.packages("dplyr")
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
library(dplyr)
library("dplyr")
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997,])
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997, "hwy"])
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles[vehicles$year == 1997, "hwy"]
order(vehicles[vehicles$year == 1997, "hwy"])
last_error()
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
class(vehicles[vehicles$year == 1997, "hwy"])
arrange(vehicles[vehicles$year == 1997, "hwy"])
arrange(vehicles[vehicles$year == 1997, "hwy"])
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makers <- select(make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makers <- select(vehicles, make)
View(makers)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(makers)
# Filter the data set for vehicles manufactured in 1997
made_1997 <- filter(vehicles, 1997)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, 1997)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Filter the data set for vehicles manufactured in 1997
made_1997 <- filter(vehicles, year == 1997)
View(made_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(made_1997,hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
made_1997 <- arrange(made_1997,hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
made_1997 <- mutate(made_1997,average = (hwy * cty) / 2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
made_1997 <- mutate(made_1997,average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicle_2wd_20_city <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
View(vehicle_2wd_20_city)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicle_2wd_20_city, min(hwy))
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, amount_of_time_flying = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, amount_of_time_flying = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, amount_of_time_flying)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
mutate(flights, amount_of_time_flying = arr_delay - dep_delay) %>% flights <- arrange(, amount_of_time_flying)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -amount_of_time_flying)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, amount_of_time_flying = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -amount_of_time_flying)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
mutate(flights, amount_of_time_flying = arr_delay - dep_delay)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, average = mean(amount_of_time_flying))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, average = mean(amount_of_time_flying), na.rm = T)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, average = mean(amount_of_time_flying, na.rm = T))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
View(to_sea)
to_sea <- select(to_sea, origin, dest, gain_in_air)
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -gain_in_air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
#mutate(flights, gain_in_air = arr_delay - dep_delay)
# Make a histogram of the amount of time gained using the `hist()` function
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, average = mean(gain_in_air, na.rm = T))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
to_sea <- select(to_sea, origin, dest, gain_in_air)
View(to_sea)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, average = mean(gain_in_air, na.rm = T))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
mutate(flights, gain_in_air = arr_delay - dep_delay) %?% arrange(-gain_in_air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
mutate(flights, gain_in_air = arr_delay - dep_delay) %>% arrange(-gain_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(pull(flights,gain_in_air))
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, average = mean(gain_in_air, na.rm = T))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(to_sea, origin == "JFK") %>%
summarize(average = mean(gain_in_air, na.rm = T), min = min(gain_in_air, na.rm = T), max = max(gain_in_air, na.rm = T))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights,gain_in_air)
hist(pull(flights,gain_in_air))
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
diff_makers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(diff_makers)
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles[vehicles$year == 1997, "hwy"]
# Filter the data set for vehicles manufactured in 1997
made_1997 <- vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
made_1997 <- vehicles[vehicles$year == 1997, "hwy"]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
made_1997$average <- (made_1997$hwy + made_1997$cty) / 2
# Filter the data set for vehicles manufactured in 1997
made_1997 <- vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
made_1997 <- vehicles[vehicles$year == 1997, "hwy"]
# Filter the data set for vehicles manufactured in 1997
made_1997 <- vehicles[vehicles$year == 1997,]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
made_1997$average <- (made_1997$hwy + made_1997$cty) / 2
View(made_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive",]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
print(efficient_2wd)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id" ]
